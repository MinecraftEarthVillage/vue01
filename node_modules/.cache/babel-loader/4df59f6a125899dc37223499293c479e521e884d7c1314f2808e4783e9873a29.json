{"ast":null,"code":"import { onMounted, onUnmounted, onUpdated, reactive, toRefs } from 'vue';\nexport default {\n  setup() {\n    //初始化项目工作都放在setup中\n    console.log('当前应用程序被安装了');\n    const state = reactive({\n      //定义状态\n      msg: '学而时习之',\n      //定义变量\n      changeMsg: () => {\n        //定义方法\n        state.msg = '不亦说乎';\n      }\n    });\n    let timer = 0;\n    let count = 0;\n    onMounted(() => {\n      console.log('页面挂载完成，触发了onMounted钩子函数');\n      timer = setInterval(() => {\n        console.log('定时器正在运行中', count++);\n      }, 1000);\n    });\n    onUpdated(() => {\n      console.log('数据发生了更新，触发了onUpdated钩子函数');\n    });\n    onUnmounted(() => {\n      console.log('页面、组件退出，触发了onUnmounted钩子函数');\n      //如果不清除，这些异步的行为就会常驻在内存中，一定程度上会造成常驻内存的不必要消耗，造成内存泄漏\n      clearInterval(timer);\n    });\n    return {\n      ...toRefs(state)\n    };\n  }\n};","map":{"version":3,"names":["onMounted","onUnmounted","onUpdated","reactive","toRefs","setup","console","log","state","msg","changeMsg","timer","count","setInterval","clearInterval"],"sources":["D:\\网页设计\\Vue\\vue01\\src\\components\\test12-1.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h1>Vue3生命周期钩子函数</h1>\r\n        <h2>响应式拦截数据data的值是：{{ msg }}</h2>\r\n        <p><button @click=\"changeMsg\">点击改变msg</button></p>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { onMounted, onUnmounted, onUpdated, reactive, toRefs } from 'vue';\r\nexport default {\r\n    setup() {//初始化项目工作都放在setup中\r\n        console.log('当前应用程序被安装了');\r\n        const state = reactive({//定义状态\r\n            msg: '学而时习之',//定义变量\r\n            changeMsg: () => {//定义方法\r\n                state.msg = '不亦说乎'\r\n            }\r\n        })\r\n        let timer = 0;\r\n        let count = 0;\r\n        onMounted(() => {\r\n            console.log('页面挂载完成，触发了onMounted钩子函数');\r\n            timer = setInterval(() => {\r\n                console.log('定时器正在运行中', count++)\r\n            }, 1000)\r\n        })\r\n        onUpdated(() => {\r\n            console.log('数据发生了更新，触发了onUpdated钩子函数')\r\n        })\r\n        onUnmounted(() => {\r\n            console.log('页面、组件退出，触发了onUnmounted钩子函数')\r\n            //如果不清除，这些异步的行为就会常驻在内存中，一定程度上会造成常驻内存的不必要消耗，造成内存泄漏\r\n            clearInterval(timer);\r\n        })\r\n        return{...toRefs(state)}\r\n    }\r\n}\r\n</script>\r\n\r\n<style></style>"],"mappings":"AASA,SAASA,SAAS,EAAEC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAK,QAAS,KAAK;AACzE,eAAe;EACXC,KAAKA,CAAA,EAAG;IAAC;IACLC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB,MAAMC,KAAI,GAAIL,QAAQ,CAAC;MAAC;MACpBM,GAAG,EAAE,OAAO;MAAC;MACbC,SAAS,EAAEA,CAAA,KAAM;QAAC;QACdF,KAAK,CAACC,GAAE,GAAI,MAAK;MACrB;IACJ,CAAC;IACD,IAAIE,KAAI,GAAI,CAAC;IACb,IAAIC,KAAI,GAAI,CAAC;IACbZ,SAAS,CAAC,MAAM;MACZM,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtCI,KAAI,GAAIE,WAAW,CAAC,MAAM;QACtBP,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEK,KAAK,EAAE;MACnC,CAAC,EAAE,IAAI;IACX,CAAC;IACDV,SAAS,CAAC,MAAM;MACZI,OAAO,CAACC,GAAG,CAAC,0BAA0B;IAC1C,CAAC;IACDN,WAAW,CAAC,MAAM;MACdK,OAAO,CAACC,GAAG,CAAC,4BAA4B;MACxC;MACAO,aAAa,CAACH,KAAK,CAAC;IACxB,CAAC;IACD,OAAM;MAAC,GAAGP,MAAM,CAACI,KAAK;IAAC;EAC3B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}