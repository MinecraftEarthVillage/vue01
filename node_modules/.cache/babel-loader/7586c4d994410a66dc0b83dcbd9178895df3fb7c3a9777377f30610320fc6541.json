{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_navbar = _resolveComponent(\"navbar\");\n  const _component_listbar = _resolveComponent(\"listbar\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_navbar, {\n    onEvent: $setup.handleClick\n  }, null, 8 /* PROPS */, [\"onEvent\"]), _cache[0] || (_cache[0] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createTextVNode(_toDisplayString(_ctx.mytext), 1 /* TEXT */), _cache[1] || (_cache[1] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _cache[2] || (_cache[2] = _createElementVNode(\"p\", null, \"以下是不传递参数的组件：\", -1 /* HOISTED */)), _ctx.isShow ? (_openBlock(), _createBlock(_component_listbar, {\n    key: 0\n  })) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createVNode","_component_navbar","onEvent","$setup","handleClick","_createElementVNode","_createTextVNode","_toDisplayString","_ctx","mytext","isShow","_createBlock","_component_listbar","key","_createCommentVNode"],"sources":["D:\\网页设计\\Vue\\vue01\\src\\实验8\\FatherComp.vue"],"sourcesContent":["<template>\r\n  <navbar @event=\"handleClick\"></navbar>\r\n  <br>{{ mytext }}<br>\r\n  <p>以下是不传递参数的组件：</p>\r\n  <listbar v-if=\"isShow\"></listbar>\r\n</template>\r\n\r\n<script>\r\nimport {reactive,toRefs} from 'vue'\r\nimport navbar from './ChildComp'\r\nimport listbar from './ListComp'\r\nexport default {\r\ncomponents:{navbar,listbar},\r\nsetup(){\r\n    const state =reactive({\r\n        isShow:false,\r\n        mytext:'原有内容'\r\n    })\r\n    const handleClick=(sonData)=>{\r\n        state.isShow=!state.isShow\r\n        if (state.isShow) state.mytext=sonData\r\n        else state.mytext=''\r\n    }\r\n    return{\r\n        ...toRefs(state),\r\n        handleClick\r\n    }\r\n}\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":";;;;uBAAAA,mBAAA,CAAAC,SAAA,SACEC,YAAA,CAAsCC,iBAAA;IAA7BC,OAAK,EAAEC,MAAA,CAAAC;EAAW,sC,0BAC3BC,mBAAA,CAAI,sCAFNC,gBAAA,CAAAC,gBAAA,CAESC,IAAA,CAAAC,MAAM,kB,0BAAGJ,mBAAA,CAAI,sC,0BACpBA,mBAAA,CAAmB,WAAhB,cAAY,sBACAG,IAAA,CAAAE,MAAM,I,cAArBC,YAAA,CAAiCC,kBAAA;IAJnCC,GAAA;EAAA,MAAAC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}