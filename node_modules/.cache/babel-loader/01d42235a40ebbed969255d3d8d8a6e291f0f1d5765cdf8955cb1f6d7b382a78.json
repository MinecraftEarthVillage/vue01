{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.arr, (item, index) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: index,\n      onClick: $event => _ctx.selectOneFun(index)\n    }, _toDisplayString(index) + \":\" + _toDisplayString(item), 9 /* TEXT, PROPS */, _hoisted_1);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", null, \"你选择了【\" + _toDisplayString(_ctx.selectOne) + \"】\", 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createElementVNode","_renderList","_ctx","arr","item","index","key","onClick","$event","selectOneFun","_toDisplayString","_hoisted_1","selectOne"],"sources":["C:\\Users\\Administrator\\Desktop\\vue01\\src\\components\\test13-1.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <button v-for=\"(item,index) in arr\" v-bind:key=\"index\" @click=\"selectOneFun(index)\">\r\n        {{ index }}:{{ item }}\r\n        </button>\r\n    </div>\r\n\r\n    <div>你选择了【{{ selectOne }}】</div>\r\n</template>\r\n\r\n<script>\r\nimport { reactive,toRefs,onBeforeMount,onMounted, onBeforeUpdate,  onUpdated ,onBeforeUnmount,onUnmounted,onDeactivated} from 'vue';\r\n\r\n\r\nexport default {\r\n    name: \"App\",\r\n    setup(){\r\n        console.log(\"1...setup()开始创建组件\");\r\n        const data=reactive({\r\n            arr: [\"Yes\",\"NO\"],\r\n            selectOne:\"\",\r\n            selectOneFun:(index)=>{data.selectOne=data.arr[index];},\r\n        });\r\n        onBeforeMount(  ()=>    {\r\n            console.log(\"2...onBeforeMount()组件挂在到页面之前执行\");\r\n            onMounted(()=>{\r\n                console.log(\"3...onMounted()组件挂在到页面之后执行\")\r\n            })\r\n            onBeforeUpdate(()=>{\r\n                console.log(\"4..toExponential.onBeforeUpdate()在组件更新之前执行\");\r\n            \r\n            })\r\n\r\n            onUpdated(()=>{\r\n                console.log(\"5...onUpdated()在组件更新之后执行\");\r\n            })\r\n\r\n            onBeforeUnmount(()=>{\r\n                console.log(\"6...onBeforeUnmount()在组件卸载之前执行\");\r\n            })\r\n            onUnmounted(()=>{\r\n                console.log(\"7...onUnmounted()在组件卸载之后执行\");\r\n            });\r\n            onDeactivated(()=>{\r\n                console.log(\"8...onDeactivated()在组件切换中老组件消失的时候执行\");\r\n            })\r\n            const refData=toRefs(data);\r\n            return{...refData};\r\n        })\r\n    }\r\n}\r\n</script>\r\n"],"mappings":";mBAAA;;uBAAAA,mBAAA,CAAAC,SAAA,SACIC,mBAAA,CAIM,e,kBAHFF,mBAAA,CAESC,SAAA,QAJjBE,WAAA,CAEuCC,IAAA,CAAAC,GAAG,EAF1C,CAEwBC,IAAI,EAACC,KAAK;yBAA1BP,mBAAA,CAES;MAFkCQ,GAAG,EAAED,KAAK;MAAGE,OAAK,EAAAC,MAAA,IAAEN,IAAA,CAAAO,YAAY,CAACJ,KAAK;wBAC9EA,KAAK,IAAG,GAAC,GAAAK,gBAAA,CAAGN,IAAI,wBAH3BO,UAAA;oCAOIX,mBAAA,CAAgC,aAA3B,OAAK,GAAAU,gBAAA,CAAGR,IAAA,CAAAU,SAAS,IAAG,GAAC,gB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}